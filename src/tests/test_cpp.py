import unittest, sys, glob2, warnings, subprocess, tempfile, os
sys.path.append("/app/code/")
from Graph import Graph
from langToCFG.cpp import CPPConvert
from Log import Log, LOG_LEVEL

def ignore_warnings(test_func): # For warnings generated by third party code
    def do_test(self, *args, **kwargs):
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            test_func(self, *args, **kwargs)
    return do_test

class TestCPPConvert(unittest.TestCase):
   
    @ignore_warnings # glob regex deprecation warnings
    def testCreateDotFiles(self): 
        # Test that it creates a folder for the files
        count1 = len(glob2.glob("/app/code/tests/cppFiles/*"))
        c = CPPConvert(Log())
        c.createDotFiles("/app/code/tests/cppFiles/blank", ".cpp")
        count2 = len(glob2.glob("/app/code/tests/cppFiles/*"))
        self.assertEqual(count1 + 1, count2)

        tempFolder = "/app/code/tests/cppFiles/cppConverterTemps"
        origDir = glob2.glob("/app/code/tests/cppFiles/*")
        self.assertIn(tempFolder, origDir)

        # Affirm that dot files are indeed inside the folder
        tempContents = glob2.glob("/app/code/tests/cppFiles/cppConverterTemps/*.dot")
        self.assertNotEqual(len(tempContents), 0)
        c.cleanTemps()
    
    @ignore_warnings # glob2 regex use is deprecated
    def testToGraph(self):
        # Check that it returns the correct graphs
        c = CPPConvert(Log(log_level=LOG_LEVEL.DEBUG))

        graph1 = Graph([], set([0,1]), 0, 1)
        graph2 = c.toGraph("/app/code/tests/cppFiles/blank", ".cpp")
        self.assertTrue('blank0' in graph2.keys()) 
        graph2 = graph2['blank0']
        self.assertEqual(graph1, graph2)

        graph3 = Graph([[0,1], [0,2], [1,5], [2,3], [2,4], [3,5], [4,6]], set([0,1,2,3,4,5,6]), 0,5)
        graph4 = c.toGraph("/app/code/tests/cppFiles/names", ".cpp")['names0'] 
        self.assertEqual(graph3, graph4)
         
    @ignore_warnings
    def testConvertToStandardFormat(self):
        # Affirm converted files are in standard format (use tempfiles)
        c = CPPConvert(Log())
        os.chdir("cppFiles")
        with open("standardFormat.txt", "r") as standardFormat:
            subprocess.check_call(["mkdir" , "-p", "cppConverterTemps"])
            subprocess.call(["cp","nonStandardFormat.txt", "cppConverterTemps/nonStandardFormat.dot"])
            c.convertToStandardFormat("/app/code/tests/cppFiles/nonStandardFormat")
            with open("cppConverterTemps/nonStandardFormat0.dot", "r") as convertedFormat:
                self.assertEquals(standardFormat.readlines(), convertedFormat.readlines())
        c.cleanTemps()

    @ignore_warnings
    def testCleanTemps(self):
        # Tests that cleanTemps() deletes the temp directory
        c = CPPConvert(None)
        # Create temp directory
        subprocess.check_call(["mkdir" , "-p", "cppConverterTemps"])
        tempFolder = "/app/code/tests/cppConverterTemps"
        origDir = glob2.glob("/app/code/tests/*")
        self.assertIn(tempFolder, origDir)
        c.cleanTemps()
        origDir = glob2.glob("/app/code/tests/*")  
        self.assertNotIn(tempFolder, origDir)
        
if __name__ == '__main__':
    unittest.main()
