#!/bin/sh
# exercise chcon

if test "$VERBOSE" = yes; then
  set -x
  chcon --version
fi

. $srcdir/../lang-default
. $srcdir/../test-lib.sh
require_root_
require_selinux_

mkdir -p d/sub/s2 || framework_failure
touch f g d/sub/1 d/sub/2 || framework_failure

fail=0

# Set to a specified context.
# Use root:object_r:tmp_t:s0.  It is special in that
# it works even when mcstransd isn't running.
u1=root
r1=object_r
t1=tmp_t
range=s0
ctx=$u1:$r1:$t1:$range
chcon $ctx f || fail=1
stat --printf='f|%C\n' f > out || fail=1

# Use --reference.
chcon --ref=f g || fail=1
stat --printf='g|%C\n' g >> out || fail=1

# Change the individual parts of the context, one by one.
u2=user_u
r2=object_r
t2=file_t
for i in --user=$u2 --role=$r2 --type=$t2 --range=$range; do
  chcon $i f || fail=1
  stat --printf="f|$i|"'%C\n' f >> out || fail=1
done

# Same, but change back using the short-named options.
for i in -u$u1 -r$r1 -t$t1; do
  chcon $i f || fail=1
  stat --printf="f|$i|"'%C\n' f >> out || fail=1
done

cat <<EOF > exp || fail=1
f|$ctx
g|$ctx
f|--user=$u2|$u2:$r1:$t1:$range
f|--role=$r2|$u2:$r2:$t1:$range
f|--type=$t2|$u2:$r2:$t2:$range
f|--range=$range|$u2:$r2:$t2:$range
f|-uroot|root:object_r:file_t:$range
f|-robject_r|root:object_r:file_t:$range
f|-ttmp_t|root:object_r:tmp_t:$range
EOF

compare out exp || fail=1

(exit $fail); exit $fail
