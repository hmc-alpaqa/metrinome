#!/bin/sh
# Make sure that `tail -n0 -f' and `tail -c0 -f' sleep
# rather than doing what amounted to a busy-wait.

# Copyright (C) 2003, 2006-2007 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This bug was fixed for 5.0.91
# It skips the test if your system lacks a /proc/$pid/status
# file, or if its contents don't look right.

if test "$VERBOSE" = yes; then
  set -x
  tail --version
fi

. $srcdir/../test-lib.sh

sleep 2 &
pid=$!
sleep .5
grep '^State:[	 ]*[S]' /proc/$pid/status > /dev/null 2>&1 ||
  skip_test_ "/proc/$pid/status: missing or 'different'"
kill $pid

touch empty || framework_failure
echo anything > nonempty || framework_failure

fail=0

for file in empty nonempty; do
  for c_or_n in c n; do
    tail --sleep=4 -${c_or_n} 0 -f $file &
    pid=$!
    sleep .5
    set _ `sed -n '/^State:[	 ]*\([^	 ]\)/s//\1/p' /proc/$pid/status`
    shift # Remove the leading `_'.
    state=$1
    case $state in
      S*) ;;
      *) echo $0: process in unexpected state: $state 1>&2; fail=1 ;;
    esac
    kill $pid
  done
done

(exit $fail); exit $fail
