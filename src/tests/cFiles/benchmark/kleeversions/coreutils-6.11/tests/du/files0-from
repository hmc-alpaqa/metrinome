#!/bin/sh
# -*- perl -*-
# Exercise du's --files0-from option.

# Copyright (C) 2004, 2005, 2007 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

: ${srcdir=.}
. $srcdir/../require-perl

me=`echo $0|sed 's,.*/,,'`
exec $PERL -w -I$srcdir/.. -MCoreutils -M"CuTmpdir qw($me)" -- - <<\EOF
#/
require 5.003;
use strict;

(my $program_name = $0) =~ s|.*/||;

$ENV{PROG} = 'du';

# Turn off localization of executable's ouput.
@ENV{qw(LANGUAGE LANG LC_ALL)} = ('C') x 3;

my @Tests =
  (
   # invalid extra command line argument
   ['f-extra-arg', '--files0-from=- no-such', {IN=>"a"}, {EXIT=>1},
    {ERR => "du: extra operand `no-such'\n"
	. "File operands cannot be combined with --files0-from.\n"
	. "Try `du --help' for more information.\n"}
    ],

   # missing input file
   ['missing', '--files0-from=missing', {EXIT=>1},
    {ERR => "du: cannot open `missing' for reading: "
     . "No such file or directory\n"}],

   # empty input
   ['empty', '--files0-from=-'],

   # empty input, from non-regular file
   ['empty-nonreg', '--files0-from=/dev/null'],

   # one NUL
   ['nul-1', '--files0-from=-', '<', {IN=>"\0"}, {EXIT=>1},
    {ERR => "du: -:1: invalid zero-length file name\n"}],

   # two NULs
   ['nul-2', '--files0-from=-', '<', {IN=>"\0\0"}, {EXIT=>1},
    {ERR => "du: -:1: invalid zero-length file name\n"
          . "du: -:2: invalid zero-length file name\n"}],

   # one file name, no NUL
   ['1', '--files0-from=-', '<',
    {IN=>{f=>"g"}}, {AUX=>{g=>''}},
    {OUT=>"0\tg\n"}, {OUT_SUBST=>'s/^\d+/0/'} ],

   # one file name, with NUL
   ['1a', '--files0-from=-', '<',
    {IN=>{f=>"g\0"}}, {AUX=>{g=>''}},
    {OUT=>"0\tg\n"}, {OUT_SUBST=>'s/^\d+/0/'} ],

   # two file names, no final NUL
   ['2', '--files0-from=-', '<',
    {IN=>{f=>"g\0g"}}, {AUX=>{g=>''}},
    {OUT=>"0\tg\n0\tg\n"}, {OUT_SUBST=>'s/^\d+/0/'} ],

   # two file names, with final NUL
   ['2a', '--files0-from=-', '<',
    {IN=>{f=>"g\0g\0"}}, {AUX=>{g=>''}},
    {OUT=>"0\tg\n0\tg\n"}, {OUT_SUBST=>'s/^\d+/0/'} ],

   # Ensure that du processes FILEs following a zero-length name.
   ['zero-len', '--files0-from=-', '<',
    {IN=>{f=>"\0g\0"}}, {AUX=>{g=>''}},
    {OUT=>"0\tg\n"}, {OUT_SUBST=>'s/^\d+/0/'},
    {ERR => "du: -:1: invalid zero-length file name\n"}, {EXIT=>1} ],
  );

my $save_temps = $ENV{DEBUG};
my $verbose = $ENV{VERBOSE};

my $prog = $ENV{PROG} || die "$0: \$PROG not specified in environment\n";
my $fail = run_tests ($program_name, $prog, \@Tests, $save_temps, $verbose);
exit $fail;
EOF
