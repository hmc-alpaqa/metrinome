digraph "CFG for 'rpl_regcomp' function" {
	label="CFG for 'rpl_regcomp' function";

	Node0xd490e0 [shape=record,label="{%3:\l  %4 = alloca i32, align 4\l  %5 = alloca %struct.re_pattern_buffer*, align 8\l  %6 = alloca i8*, align 8\l  %7 = alloca i32, align 4\l  %8 = alloca i32, align 4\l  %9 = alloca i64, align 8\l  %10 = alloca i32, align 4\l  store %struct.re_pattern_buffer* %0, %struct.re_pattern_buffer** %5, align\l... 8, !tbaa !1066\l  call void @llvm.dbg.declare(metadata %struct.re_pattern_buffer** %5,\l... metadata !1061, metadata !DIExpression()), !dbg !1070\l  store i8* %1, i8** %6, align 8, !tbaa !1066\l  call void @llvm.dbg.declare(metadata i8** %6, metadata !1062, metadata\l... !DIExpression()), !dbg !1071\l  store i32 %2, i32* %7, align 4, !tbaa !1072\l  call void @llvm.dbg.declare(metadata i32* %7, metadata !1063, metadata\l... !DIExpression()), !dbg !1074\l  %11 = bitcast i32* %8 to i8*, !dbg !1075\l  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #12, !dbg !1075\l  call void @llvm.dbg.declare(metadata i32* %8, metadata !1064, metadata\l... !DIExpression()), !dbg !1076\l  %12 = bitcast i64* %9 to i8*, !dbg !1077\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #12, !dbg !1077\l  call void @llvm.dbg.declare(metadata i64* %9, metadata !1065, metadata\l... !DIExpression()), !dbg !1078\l  %13 = load i32, i32* %7, align 4, !dbg !1079, !tbaa !1072\l  %14 = and i32 %13, 1, !dbg !1080\l  %15 = icmp ne i32 %14, 0, !dbg !1081\l  %16 = zext i1 %15 to i64, !dbg !1081\l  %17 = select i1 %15, i64 242428, i64 16843462, !dbg !1081\l  store i64 %17, i64* %9, align 8, !dbg !1078, !tbaa !1082\l  %18 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5, align\l... 8, !dbg !1084, !tbaa !1066\l  %19 = getelementptr inbounds %struct.re_pattern_buffer,\l... %struct.re_pattern_buffer* %18, i32 0, i32 0, !dbg !1085\l  store %struct.re_dfa_t* null, %struct.re_dfa_t** %19, align 8, !dbg !1086,\l... !tbaa !1087\l  %20 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5, align\l... 8, !dbg !1089, !tbaa !1066\l  %21 = getelementptr inbounds %struct.re_pattern_buffer,\l... %struct.re_pattern_buffer* %20, i32 0, i32 1, !dbg !1090\l  store i64 0, i64* %21, align 8, !dbg !1091, !tbaa !1092\l  %22 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5, align\l... 8, !dbg !1093, !tbaa !1066\l  %23 = getelementptr inbounds %struct.re_pattern_buffer,\l... %struct.re_pattern_buffer* %22, i32 0, i32 2, !dbg !1094\l  store i64 0, i64* %23, align 8, !dbg !1095, !tbaa !1096\l  %24 = call noalias i8* @malloc(i64 256) #12, !dbg !1097\l  %25 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5, align\l... 8, !dbg !1098, !tbaa !1066\l  %26 = getelementptr inbounds %struct.re_pattern_buffer,\l... %struct.re_pattern_buffer* %25, i32 0, i32 4, !dbg !1099\l  store i8* %24, i8** %26, align 8, !dbg !1100, !tbaa !1101\l  %27 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5, align\l... 8, !dbg !1102, !tbaa !1066\l  %28 = getelementptr inbounds %struct.re_pattern_buffer,\l... %struct.re_pattern_buffer* %27, i32 0, i32 4, !dbg !1102\l  %29 = load i8*, i8** %28, align 8, !dbg !1102, !tbaa !1101\l  %30 = icmp eq i8* %29, null, !dbg !1102\l  %31 = zext i1 %30 to i32, !dbg !1102\l  %32 = sext i32 %31 to i64, !dbg !1102\l  %33 = call i64 @llvm.expect.i64(i64 %32, i64 0), !dbg !1102\l  %34 = icmp ne i64 %33, 0, !dbg !1102\l  br i1 %34, label %35, label %36, !dbg !1104\l|{<s0>T|<s1>F}}"];
	Node0xd490e0:s0 -> Node0xd4a5b0;
	Node0xd490e0:s1 -> Node0xd4a600;
	Node0xd4a5b0 [shape=record,label="{%35:\l\l  store i32 12, i32* %4, align 4, !dbg !1105\l  store i32 1, i32* %10, align 4\l  br label %107, !dbg !1105\l}"];
	Node0xd4a5b0 -> Node0xd4a8d0;
	Node0xd4a600 [shape=record,label="{%36:\l\l  %37 = load i32, i32* %7, align 4, !dbg !1106, !tbaa !1072\l  %38 = and i32 %37, 2, !dbg !1107\l  %39 = icmp ne i32 %38, 0, !dbg !1108\l  %40 = zext i1 %39 to i64, !dbg !1108\l  %41 = select i1 %39, i64 4194304, i64 0, !dbg !1108\l  %42 = load i64, i64* %9, align 8, !dbg !1109, !tbaa !1082\l  %43 = or i64 %42, %41, !dbg !1109\l  store i64 %43, i64* %9, align 8, !dbg !1109, !tbaa !1082\l  %44 = load i32, i32* %7, align 4, !dbg !1110, !tbaa !1072\l  %45 = and i32 %44, 4, !dbg !1112\l  %46 = icmp ne i32 %45, 0, !dbg !1112\l  br i1 %46, label %47, label %57, !dbg !1113\l|{<s0>T|<s1>F}}"];
	Node0xd4a600:s0 -> Node0xd4a650;
	Node0xd4a600:s1 -> Node0xd4a6a0;
	Node0xd4a650 [shape=record,label="{%47:\l\l  %48 = load i64, i64* %9, align 8, !dbg !1114, !tbaa !1082\l  %49 = and i64 %48, -65, !dbg !1114\l  store i64 %49, i64* %9, align 8, !dbg !1114, !tbaa !1082\l  %50 = load i64, i64* %9, align 8, !dbg !1116, !tbaa !1082\l  %51 = or i64 %50, 256, !dbg !1116\l  store i64 %51, i64* %9, align 8, !dbg !1116, !tbaa !1082\l  %52 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5, align\l... 8, !dbg !1117, !tbaa !1066\l  %53 = getelementptr inbounds %struct.re_pattern_buffer,\l... %struct.re_pattern_buffer* %52, i32 0, i32 7, !dbg !1118\l  %54 = load i8, i8* %53, align 8, !dbg !1119\l  %55 = and i8 %54, 127, !dbg !1119\l  %56 = or i8 %55, -128, !dbg !1119\l  store i8 %56, i8* %53, align 8, !dbg !1119\l  br label %62, !dbg !1120\l}"];
	Node0xd4a650 -> Node0xd4a6f0;
	Node0xd4a6a0 [shape=record,label="{%57:\l\l  %58 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5, align\l... 8, !dbg !1121, !tbaa !1066\l  %59 = getelementptr inbounds %struct.re_pattern_buffer,\l... %struct.re_pattern_buffer* %58, i32 0, i32 7, !dbg !1122\l  %60 = load i8, i8* %59, align 8, !dbg !1123\l  %61 = and i8 %60, 127, !dbg !1123\l  store i8 %61, i8* %59, align 8, !dbg !1123\l  br label %62\l}"];
	Node0xd4a6a0 -> Node0xd4a6f0;
	Node0xd4a6f0 [shape=record,label="{%62:\l\l  %63 = load i32, i32* %7, align 4, !dbg !1124, !tbaa !1072\l  %64 = and i32 %63, 8, !dbg !1125\l  %65 = icmp ne i32 %64, 0, !dbg !1126\l  %66 = xor i1 %65, true, !dbg !1126\l  %67 = xor i1 %66, true, !dbg !1127\l  %68 = zext i1 %67 to i32, !dbg !1127\l  %69 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5, align\l... 8, !dbg !1128, !tbaa !1066\l  %70 = getelementptr inbounds %struct.re_pattern_buffer,\l... %struct.re_pattern_buffer* %69, i32 0, i32 7, !dbg !1129\l  %71 = trunc i32 %68 to i8, !dbg !1130\l  %72 = load i8, i8* %70, align 8, !dbg !1130\l  %73 = and i8 %71, 1, !dbg !1130\l  %74 = shl i8 %73, 4, !dbg !1130\l  %75 = and i8 %72, -17, !dbg !1130\l  %76 = or i8 %75, %74, !dbg !1130\l  store i8 %76, i8* %70, align 8, !dbg !1130\l  %77 = zext i8 %73 to i32, !dbg !1130\l  %78 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5, align\l... 8, !dbg !1131, !tbaa !1066\l  %79 = getelementptr inbounds %struct.re_pattern_buffer,\l... %struct.re_pattern_buffer* %78, i32 0, i32 5, !dbg !1132\l  store i8* null, i8** %79, align 8, !dbg !1133, !tbaa !1134\l  %80 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5, align\l... 8, !dbg !1135, !tbaa !1066\l  %81 = load i8*, i8** %6, align 8, !dbg !1136, !tbaa !1066\l  %82 = load i8*, i8** %6, align 8, !dbg !1137, !tbaa !1066\l  %83 = call i64 @strlen(i8* %82) #16, !dbg !1138\l  %84 = load i64, i64* %9, align 8, !dbg !1139, !tbaa !1082\l  %85 = call i32 @re_compile_internal(%struct.re_pattern_buffer* %80, i8* %81,\l... i64 %83, i64 %84), !dbg !1140\l  store i32 %85, i32* %8, align 4, !dbg !1141, !tbaa !1142\l  %86 = load i32, i32* %8, align 4, !dbg !1143, !tbaa !1142\l  %87 = icmp eq i32 %86, 16, !dbg !1145\l  br i1 %87, label %88, label %89, !dbg !1146\l|{<s0>T|<s1>F}}"];
	Node0xd4a6f0:s0 -> Node0xd4a740;
	Node0xd4a6f0:s1 -> Node0xd4a790;
	Node0xd4a740 [shape=record,label="{%88:\l\l  store i32 8, i32* %8, align 4, !dbg !1147, !tbaa !1142\l  br label %89, !dbg !1148\l}"];
	Node0xd4a740 -> Node0xd4a790;
	Node0xd4a790 [shape=record,label="{%89:\l\l  %90 = load i32, i32* %8, align 4, !dbg !1149, !tbaa !1142\l  %91 = icmp eq i32 %90, 0, !dbg !1149\l  %92 = zext i1 %91 to i32, !dbg !1149\l  %93 = sext i32 %92 to i64, !dbg !1149\l  %94 = call i64 @llvm.expect.i64(i64 %93, i64 1), !dbg !1149\l  %95 = icmp ne i64 %94, 0, !dbg !1149\l  br i1 %95, label %96, label %99, !dbg !1151\l|{<s0>T|<s1>F}}"];
	Node0xd4a790:s0 -> Node0xd4a7e0;
	Node0xd4a790:s1 -> Node0xd4a830;
	Node0xd4a7e0 [shape=record,label="{%96:\l\l  %97 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5, align\l... 8, !dbg !1152, !tbaa !1066\l  %98 = call i32 @rpl_re_compile_fastmap(%struct.re_pattern_buffer* %97), !dbg\l... !1153\l  br label %105, !dbg !1154\l}"];
	Node0xd4a7e0 -> Node0xd4a880;
	Node0xd4a830 [shape=record,label="{%99:\l\l  %100 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5,\l... align 8, !dbg !1155, !tbaa !1066\l  %101 = getelementptr inbounds %struct.re_pattern_buffer,\l... %struct.re_pattern_buffer* %100, i32 0, i32 4, !dbg !1155\l  %102 = load i8*, i8** %101, align 8, !dbg !1155, !tbaa !1101\l  call void @free(i8* %102) #12, !dbg !1155\l  %103 = load %struct.re_pattern_buffer*, %struct.re_pattern_buffer** %5,\l... align 8, !dbg !1157, !tbaa !1066\l  %104 = getelementptr inbounds %struct.re_pattern_buffer,\l... %struct.re_pattern_buffer* %103, i32 0, i32 4, !dbg !1158\l  store i8* null, i8** %104, align 8, !dbg !1159, !tbaa !1101\l  br label %105\l}"];
	Node0xd4a830 -> Node0xd4a880;
	Node0xd4a880 [shape=record,label="{%105:\l\l  %106 = load i32, i32* %8, align 4, !dbg !1160, !tbaa !1142\l  store i32 %106, i32* %4, align 4, !dbg !1161\l  store i32 1, i32* %10, align 4\l  br label %107, !dbg !1161\l}"];
	Node0xd4a880 -> Node0xd4a8d0;
	Node0xd4a8d0 [shape=record,label="{%107:\l\l  %108 = bitcast i64* %9 to i8*, !dbg !1162\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* %108) #12, !dbg !1162\l  %109 = bitcast i32* %8 to i8*, !dbg !1162\l  call void @llvm.lifetime.end.p0i8(i64 4, i8* %109) #12, !dbg !1162\l  %110 = load i32, i32* %4, align 4, !dbg !1162\l  ret i32 %110, !dbg !1162\l}"];
}
