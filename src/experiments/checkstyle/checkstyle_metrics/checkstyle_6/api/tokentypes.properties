EOF=The end of file token.
MODIFIERS=Modifiers for type, method, and field declarations.
OBJBLOCK=An object block.
SLIST=A list of statements.
CTOR_DEF=A constructor declaration.
METHOD_DEF=A method declaration.
VARIABLE_DEF=A field or local variable declaration.
INSTANCE_INIT=An instance initializer.
STATIC_INIT=A static initialization block.
TYPE=A type.
CLASS_DEF=A class declaration.
INTERFACE_DEF=An interface declaration.
PACKAGE_DEF=The package declaration.
ARRAY_DECLARATOR=An array declaration.
EXTENDS_CLAUSE=An extends clause.
IMPLEMENTS_CLAUSE=An implements clause.
PARAMETERS=A list of parameters to a method or constructor.
PARAMETER_DEF=A parameter declaration.
LABELED_STAT=A labeled statement.
TYPECAST=A type-cast.
INDEX_OP=The array index operator.
POST_INC=The <code>++</code> (postfix increment) operator.
POST_DEC=The <code>--</code> (postfix decrement) operator.
METHOD_CALL=A method call.
METHOD_REF=Part of Java 8 syntax.
EXPR=An expression.
ARRAY_INIT=An array initialization.
IMPORT=An import declaration.
UNARY_MINUS=The <code>-</code> (unary minus) operator.
UNARY_PLUS=The <code>+</code> (unary plus) operator.
CASE_GROUP=A group of case clauses.
ELIST=An expression list.
FOR_INIT=A for loop initializer.
FOR_CONDITION=A for loop condition.
FOR_ITERATOR=A for loop iterator.
EMPTY_STAT=The empty statement.
FINAL=The <code>final</code> keyword.
ABSTRACT=The <code>abstract</code> keyword.
STRICTFP=The <code>strictfp</code> keyword.
SUPER_CTOR_CALL=A super constructor call.
CTOR_CALL=A constructor call.
SEMI=The statement terminator (<code>;</code>).
RBRACK=The <code>]</code> symbol.
LITERAL_VOID=The <code>void</code> keyword.
LITERAL_BOOLEAN=The <code>boolean</code> keyword.
LITERAL_BYTE=The <code>byte</code> keyword.
LITERAL_CHAR=The <code>char</code> keyword.
LITERAL_SHORT=The <code>short</code> keyword.
LITERAL_INT=The <code>int</code> keyword.
LITERAL_FLOAT=The <code>float</code> keyword.
LITERAL_LONG=The <code>long</code> keyword.
LITERAL_DOUBLE=The <code>double</code> keyword.
IDENT=An identifier.
DOT=The <code>&#46;</code> (dot) operator.
STAR=The <code>*</code> (multiplication or wildcard) operator.
LITERAL_PRIVATE=The <code>private</code> keyword.
LITERAL_PUBLIC=The <code>public</code> keyword.
LITERAL_PROTECTED=The <code>protected</code> keyword.
LITERAL_STATIC=The <code>static</code> keyword.
LITERAL_TRANSIENT=The <code>transient</code> keyword.
LITERAL_NATIVE=The <code>native</code> keyword.
LITERAL_SYNCHRONIZED=The <code>synchronized</code> keyword.
LITERAL_VOLATILE=The <code>volatile</code> keyword.
LITERAL_CLASS=The <code>class</code> keyword.
LITERAL_INTERFACE=The <code>interface</code> keyword.
LCURLY=A left (curly) brace (<code>{</code>).
RCURLY=A right (curly) brace (<code>}</code>).
COMMA=The <code>,</code> (comma) operator.
LPAREN=A left parenthesis (<code>(</code>).
RPAREN=A right parenthesis (<code>)</code>).
LITERAL_THIS=The <code>this</code> keyword.
LITERAL_SUPER=The <code>super</code> keyword.
ASSIGN=The <code>=</code> (assignment) operator.
LITERAL_THROWS=The <code>throws</code> keyword.
COLON=The <code>:</code> (colon) operator.
DOUBLE_COLON=The <code>::</code> (double colon) operator.
LITERAL_IF=The <code>if</code> keyword.
LITERAL_FOR=The <code>for</code> keyword.
LITERAL_WHILE=The <code>while</code> keyword.
LITERAL_DO=The <code>do</code> keyword.
DO_WHILE=Literal <code>while</code> in do-while loop.
LITERAL_BREAK=The <code>break</code> keyword.
LITERAL_CONTINUE=The <code>continue</code> keyword.
LITERAL_RETURN=The <code>return</code> keyword.
LITERAL_SWITCH=The <code>switch</code> keyword.
LITERAL_THROW=The <code>throw</code> keyword.
LITERAL_ELSE=The <code>else</code> keyword.
LITERAL_CASE=The <code>case</code> keyword.
LITERAL_DEFAULT=The <code>default</code> keyword.
LITERAL_TRY=The <code>try</code> keyword.
RESOURCE_SPECIFICATION=Java 7 try-with-resources construct.
RESOURCES=Java 7 try-with-resources construct.
RESOURCE=Java 7 try-with-resources construct.
LITERAL_CATCH=The <code>catch</code> keyword.
LITERAL_FINALLY=The <code>finally</code> keyword.
PLUS_ASSIGN=The <code>+=</code> (addition assignment) operator.
MINUS_ASSIGN=The <code>-=</code> (subtraction assignment) operator.
STAR_ASSIGN=The <code>*=</code> (multiplication assignment) operator.
DIV_ASSIGN=The <code>/=</code> (division assignment) operator.
MOD_ASSIGN=The <code>%=</code> (remainder assignment) operator.
SR_ASSIGN=The <code>&gt;&gt;=</code> (signed right shift assignment)
 operator.
BSR_ASSIGN=The <code>&gt;&gt;&gt;=</code> (unsigned right shift assignment)
 operator.
SL_ASSIGN=The <code>&lt;&lt;=</code> (left shift assignment) operator.
BAND_ASSIGN=The <code>&amp;=</code> (bitwise AND assignment) operator.
BXOR_ASSIGN=The <code>^=</code> (bitwise exclusive OR assignment) operator.
BOR_ASSIGN=The <code>|=</code> (bitwise OR assignment) operator.
QUESTION=The <code>&#63;</code> (conditional) operator.
LOR=The <code>||</code> (conditional OR) operator.
LAND=The <code>&amp;&amp;</code> (conditional AND) operator.
BOR=The <code>|</code> (bitwise OR) operator.
BXOR=The <code>^</code> (bitwise exclusive OR) operator.
BAND=The <code>&amp;</code> (bitwise AND) operator.
NOT_EQUAL=The <code>&#33;=</code> (not equal) operator.
EQUAL=The <code>==</code> (equal) operator.
LT=The <code>&lt;</code> (less than) operator.
GT=The <code>&gt;</code> (greater than) operator.
LE=The <code>&lt;=</code> (less than or equal) operator.
GE=The <code>&gt;=</code> (greater than or equal) operator.
LITERAL_INSTANCEOF=The <code>instanceof</code> operator.
SL=The <code>&lt;&lt;</code> (shift left) operator.
SR=The <code>&gt;&gt;</code> (signed shift right) operator.
BSR=The <code>&gt;&gt;&gt;</code> (unsigned shift right) operator.
PLUS=The <code>+</code> (addition) operator.
MINUS=The <code>-</code> (subtraction) operator.
DIV=The <code>/</code> (division) operator.
MOD=The <code>%</code> (remainder) operator.
INC=The <code>++</code> (prefix increment) operator.
DEC=The <code>--</code> (prefix decrement) operator.
BNOT=The <code>~</code> (bitwise complement) operator.
LNOT=The <code>&#33;</code> (logical complement) operator.
LITERAL_TRUE=The <code>true</code> keyword.
LITERAL_FALSE=The <code>false</code> keyword.
LITERAL_NULL=The <code>null</code> keyword.
LITERAL_NEW=The <code>new</code> keyword.
NUM_INT=An integer literal.
CHAR_LITERAL=A character literal.
STRING_LITERAL=A string literal.
NUM_FLOAT=A single precision floating point literal.
NUM_LONG=A long integer literal.
NUM_DOUBLE=A double precision floating point literal.
LITERAL_ASSERT=The <code>assert</code> keyword.
STATIC_IMPORT=A static import declaration.
ENUM_DEF=An enum declaration.
ENUM=The <code>enum</code> keyword.
ENUM_CONSTANT_DEF=An enum constant declaration.
FOR_EACH_CLAUSE=A for-each clause.
ANNOTATION_DEF=An annotation declaration.
ANNOTATION_FIELD_DEF=An annotation field declaration.
ANNOTATIONS=A collection of annotations on a package or enum constant.
ANNOTATION=An annotation of a package, type, field, parameter or variable.
ANNOTATION_MEMBER_VALUE_PAIR=An initialisation of an annotation member with a value.
ANNOTATION_ARRAY_INIT=An annotation array member initialisation.
TYPE_PARAMETERS=A list of type parameters to a class, interface or
 method definition.
TYPE_PARAMETER=A type parameter to a class, interface or method definition.
TYPE_ARGUMENTS=A list of type arguments to a type reference or
 a method/ctor invocation.
TYPE_ARGUMENT=A type arguments to a type reference or a method/ctor invocation.
WILDCARD_TYPE=The type that refers to all types.
TYPE_UPPER_BOUNDS=An upper bounds on a wildcard type argument or type parameter.
TYPE_LOWER_BOUNDS=A lower bounds on a wildcard type argument.
AT=An 'at' symbol - signifying an annotation instance or the prefix
 to the interface literal signifying the definition of an annotation
 declaration.
ELLIPSIS=A triple dot for variable-length parameters.
TYPE_EXTENSION_AND='&amp;' symbol when used in a generic upper or lower bounds constrain
 e.g.
GENERIC_START='&lt;' symbol signifying the start of type arguments or type
 parameters.
GENERIC_END='&gt;' symbol signifying the end of type arguments or type parameters.
LAMBDA=Special lambda symbol '-&gt;'.
SINGLE_LINE_COMMENT=Beginning of single line comment: '//'.
BLOCK_COMMENT_BEGIN=Beginning of block comment: '/*'.
BLOCK_COMMENT_END=End of block comment: '* /'.
COMMENT_CONTENT=Text of single-line or block comment.
