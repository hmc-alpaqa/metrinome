digraph "CFG for '_obstack_begin_worker' function" {
	label="CFG for '_obstack_begin_worker' function";

	Node0x201b260 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%3:\l  %4 = alloca %struct.obstack*, align 8\l  %5 = alloca i64, align 8\l  %6 = alloca i64, align 8\l  %7 = alloca %struct._obstack_chunk*, align 8\l  %8 = alloca i32, align 4\l  store %struct.obstack* %0, %struct.obstack** %4, align 8, !tbaa !1336\l  call void @llvm.dbg.declare(metadata %struct.obstack** %4, metadata !1329,\l... metadata !DIExpression()), !dbg !1340\l  store i64 %1, i64* %5, align 8, !tbaa !1341\l  call void @llvm.dbg.declare(metadata i64* %5, metadata !1330, metadata\l... !DIExpression()), !dbg !1343\l  store i64 %2, i64* %6, align 8, !tbaa !1341\l  call void @llvm.dbg.declare(metadata i64* %6, metadata !1331, metadata\l... !DIExpression()), !dbg !1344\l  %9 = bitcast %struct._obstack_chunk** %7 to i8*, !dbg !1345\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #24, !dbg !1345\l  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %7, metadata\l... !1332, metadata !DIExpression()), !dbg !1346\l  %10 = load i64, i64* %6, align 8, !dbg !1347, !tbaa !1341\l  %11 = icmp eq i64 %10, 0, !dbg !1349\l  br i1 %11, label %12, label %13, !dbg !1350\l|{<s0>T|<s1>F}}"];
	Node0x201b260:s0 -> Node0x201d410;
	Node0x201b260:s1 -> Node0x201d460;
	Node0x201d410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%12:\l12:                                               \l  store i64 16, i64* %6, align 8, !dbg !1351, !tbaa !1341\l  br label %13, !dbg !1352\l}"];
	Node0x201d410 -> Node0x201d460;
	Node0x201d460 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%13:\l13:                                               \l  %14 = load i64, i64* %5, align 8, !dbg !1353, !tbaa !1341\l  %15 = icmp eq i64 %14, 0, !dbg !1354\l  br i1 %15, label %16, label %22, !dbg !1355\l|{<s0>T|<s1>F}}"];
	Node0x201d460:s0 -> Node0x201d4b0;
	Node0x201d460:s1 -> Node0x201d500;
	Node0x201d4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%16:\l16:                                               \l  %17 = bitcast i32* %8 to i8*, !dbg !1356\l  call void @llvm.lifetime.start.p0i8(i64 4, i8* %17) #24, !dbg !1356\l  call void @llvm.dbg.declare(metadata i32* %8, metadata !1333, metadata\l... !DIExpression()), !dbg !1357\l  store i32 32, i32* %8, align 4, !dbg !1357, !tbaa !1358\l  %18 = load i32, i32* %8, align 4, !dbg !1360, !tbaa !1358\l  %19 = sub nsw i32 4096, %18, !dbg !1361\l  %20 = sext i32 %19 to i64, !dbg !1362\l  store i64 %20, i64* %5, align 8, !dbg !1363, !tbaa !1341\l  %21 = bitcast i32* %8 to i8*, !dbg !1364\l  call void @llvm.lifetime.end.p0i8(i64 4, i8* %21) #24, !dbg !1364\l  br label %22, !dbg !1365\l}"];
	Node0x201d4b0 -> Node0x201d500;
	Node0x201d500 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%22:\l22:                                               \l  %23 = load i64, i64* %5, align 8, !dbg !1366, !tbaa !1341\l  %24 = load %struct.obstack*, %struct.obstack** %4, align 8, !dbg !1367,\l... !tbaa !1336\l  %25 = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0,\l... i32 0, !dbg !1368\l  store i64 %23, i64* %25, align 8, !dbg !1369, !tbaa !1370\l  %26 = load i64, i64* %6, align 8, !dbg !1372, !tbaa !1341\l  %27 = sub i64 %26, 1, !dbg !1373\l  %28 = load %struct.obstack*, %struct.obstack** %4, align 8, !dbg !1374,\l... !tbaa !1336\l  %29 = getelementptr inbounds %struct.obstack, %struct.obstack* %28, i32 0,\l... i32 6, !dbg !1375\l  store i64 %27, i64* %29, align 8, !dbg !1376, !tbaa !1377\l  %30 = load %struct.obstack*, %struct.obstack** %4, align 8, !dbg !1378,\l... !tbaa !1336\l  %31 = load %struct.obstack*, %struct.obstack** %4, align 8, !dbg !1379,\l... !tbaa !1336\l  %32 = getelementptr inbounds %struct.obstack, %struct.obstack* %31, i32 0,\l... i32 0, !dbg !1380\l  %33 = load i64, i64* %32, align 8, !dbg !1380, !tbaa !1370\l  %34 = call i8* @call_chunkfun(%struct.obstack* noundef %30, i64 noundef\l... %33), !dbg !1381\l  %35 = bitcast i8* %34 to %struct._obstack_chunk*, !dbg !1381\l  %36 = load %struct.obstack*, %struct.obstack** %4, align 8, !dbg !1382,\l... !tbaa !1336\l  %37 = getelementptr inbounds %struct.obstack, %struct.obstack* %36, i32 0,\l... i32 1, !dbg !1383\l  store %struct._obstack_chunk* %35, %struct._obstack_chunk** %37, align 8,\l... !dbg !1384, !tbaa !1385\l  store %struct._obstack_chunk* %35, %struct._obstack_chunk** %7, align 8,\l... !dbg !1386, !tbaa !1336\l  %38 = load %struct._obstack_chunk*, %struct._obstack_chunk** %7, align 8,\l... !dbg !1387, !tbaa !1336\l  %39 = icmp ne %struct._obstack_chunk* %38, null, !dbg !1387\l  br i1 %39, label %42, label %40, !dbg !1389\l|{<s0>T|<s1>F}}"];
	Node0x201d500:s0 -> Node0x201d5a0;
	Node0x201d500:s1 -> Node0x201d550;
	Node0x201d550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#6687ed70",label="{%40:\l40:                                               \l  %41 = load void ()*, void ()** @obstack_alloc_failed_handler, align 8, !dbg\l... !1390, !tbaa !1336\l  call void %41() #25, !dbg !1391\l  unreachable, !dbg !1391\l}"];
	Node0x201d5a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%42:\l42:                                               \l  %43 = load %struct._obstack_chunk*, %struct._obstack_chunk** %7, align 8,\l... !dbg !1392, !tbaa !1336\l  %44 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk*\l... %43, i32 0, i32 2, !dbg !1392\l  %45 = getelementptr inbounds [0 x i8], [0 x i8]* %44, i64 0, i64 0, !dbg\l... !1392\l  %46 = ptrtoint i8* %45 to i64, !dbg !1392\l  %47 = sub i64 %46, 0, !dbg !1392\l  %48 = load i64, i64* %6, align 8, !dbg !1392, !tbaa !1341\l  %49 = sub i64 %48, 1, !dbg !1392\l  %50 = add i64 %47, %49, !dbg !1392\l  %51 = load i64, i64* %6, align 8, !dbg !1392, !tbaa !1341\l  %52 = sub i64 %51, 1, !dbg !1392\l  %53 = xor i64 %52, -1, !dbg !1392\l  %54 = and i64 %50, %53, !dbg !1392\l  %55 = getelementptr inbounds i8, i8* null, i64 %54, !dbg !1392\l  %56 = load %struct.obstack*, %struct.obstack** %4, align 8, !dbg !1393,\l... !tbaa !1336\l  %57 = getelementptr inbounds %struct.obstack, %struct.obstack* %56, i32 0,\l... i32 2, !dbg !1394\l  store i8* %55, i8** %57, align 8, !dbg !1395, !tbaa !1396\l  %58 = load %struct.obstack*, %struct.obstack** %4, align 8, !dbg !1397,\l... !tbaa !1336\l  %59 = getelementptr inbounds %struct.obstack, %struct.obstack* %58, i32 0,\l... i32 3, !dbg !1398\l  store i8* %55, i8** %59, align 8, !dbg !1399, !tbaa !1400\l  %60 = load %struct._obstack_chunk*, %struct._obstack_chunk** %7, align 8,\l... !dbg !1401, !tbaa !1336\l  %61 = bitcast %struct._obstack_chunk* %60 to i8*, !dbg !1402\l  %62 = load %struct.obstack*, %struct.obstack** %4, align 8, !dbg !1403,\l... !tbaa !1336\l  %63 = getelementptr inbounds %struct.obstack, %struct.obstack* %62, i32 0,\l... i32 0, !dbg !1404\l  %64 = load i64, i64* %63, align 8, !dbg !1404, !tbaa !1370\l  %65 = getelementptr inbounds i8, i8* %61, i64 %64, !dbg !1405\l  %66 = load %struct._obstack_chunk*, %struct._obstack_chunk** %7, align 8,\l... !dbg !1406, !tbaa !1336\l  %67 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk*\l... %66, i32 0, i32 0, !dbg !1407\l  store i8* %65, i8** %67, align 8, !dbg !1408, !tbaa !1336\l  %68 = load %struct.obstack*, %struct.obstack** %4, align 8, !dbg !1409,\l... !tbaa !1336\l  %69 = getelementptr inbounds %struct.obstack, %struct.obstack* %68, i32 0,\l... i32 4, !dbg !1410\l  store i8* %65, i8** %69, align 8, !dbg !1411, !tbaa !1412\l  %70 = load %struct._obstack_chunk*, %struct._obstack_chunk** %7, align 8,\l... !dbg !1413, !tbaa !1336\l  %71 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk*\l... %70, i32 0, i32 1, !dbg !1414\l  store %struct._obstack_chunk* null, %struct._obstack_chunk** %71, align 8,\l... !dbg !1415, !tbaa !1336\l  %72 = load %struct.obstack*, %struct.obstack** %4, align 8, !dbg !1416,\l... !tbaa !1336\l  %73 = getelementptr inbounds %struct.obstack, %struct.obstack* %72, i32 0,\l... i32 10, !dbg !1417\l  %74 = load i8, i8* %73, align 8, !dbg !1418\l  %75 = and i8 %74, -3, !dbg !1418\l  %76 = or i8 %75, 0, !dbg !1418\l  store i8 %76, i8* %73, align 8, !dbg !1418\l  %77 = load %struct.obstack*, %struct.obstack** %4, align 8, !dbg !1419,\l... !tbaa !1336\l  %78 = getelementptr inbounds %struct.obstack, %struct.obstack* %77, i32 0,\l... i32 10, !dbg !1420\l  %79 = load i8, i8* %78, align 8, !dbg !1421\l  %80 = and i8 %79, -5, !dbg !1421\l  %81 = or i8 %80, 0, !dbg !1421\l  store i8 %81, i8* %78, align 8, !dbg !1421\l  %82 = bitcast %struct._obstack_chunk** %7 to i8*, !dbg !1422\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* %82) #24, !dbg !1422\l  ret i32 1, !dbg !1423\l}"];
}
