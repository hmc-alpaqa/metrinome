digraph "CFG for 'mpn_base_power_of_two_p' function" {
	label="CFG for 'mpn_base_power_of_two_p' function";

	Node0x2568580 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%1:\l  %2 = alloca i32, align 4\l  %3 = alloca i32, align 4\l  store i32 %0, i32* %3, align 4, !tbaa !792\l  call void @llvm.dbg.declare(metadata i32* %3, metadata !791, metadata\l... !DIExpression()), !dbg !796\l  %4 = load i32, i32* %3, align 4, !dbg !797, !tbaa !792\l  switch i32 %4, label %13 [\l    i32 2, label %5\l    i32 4, label %6\l    i32 8, label %7\l    i32 16, label %8\l    i32 32, label %9\l    i32 64, label %10\l    i32 128, label %11\l    i32 256, label %12\l  ], !dbg !798\l|{<s0>def|<s1>2|<s2>4|<s3>8|<s4>16|<s5>32|<s6>64|<s7>128|<s8>256}}"];
	Node0x2568580:s0 -> Node0x2568850;
	Node0x2568580:s1 -> Node0x25685d0;
	Node0x2568580:s2 -> Node0x2568620;
	Node0x2568580:s3 -> Node0x2568670;
	Node0x2568580:s4 -> Node0x25686c0;
	Node0x2568580:s5 -> Node0x2568710;
	Node0x2568580:s6 -> Node0x2568760;
	Node0x2568580:s7 -> Node0x25687b0;
	Node0x2568580:s8 -> Node0x2568800;
	Node0x25685d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%5:\l5:                                                \l  store i32 1, i32* %2, align 4, !dbg !799\l  br label %14, !dbg !799\l}"];
	Node0x25685d0 -> Node0x25688a0;
	Node0x2568620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%6:\l6:                                                \l  store i32 2, i32* %2, align 4, !dbg !801\l  br label %14, !dbg !801\l}"];
	Node0x2568620 -> Node0x25688a0;
	Node0x2568670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%7:\l7:                                                \l  store i32 3, i32* %2, align 4, !dbg !802\l  br label %14, !dbg !802\l}"];
	Node0x2568670 -> Node0x25688a0;
	Node0x25686c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%8:\l8:                                                \l  store i32 4, i32* %2, align 4, !dbg !803\l  br label %14, !dbg !803\l}"];
	Node0x25686c0 -> Node0x25688a0;
	Node0x2568710 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%9:\l9:                                                \l  store i32 5, i32* %2, align 4, !dbg !804\l  br label %14, !dbg !804\l}"];
	Node0x2568710 -> Node0x25688a0;
	Node0x2568760 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%10:\l10:                                               \l  store i32 6, i32* %2, align 4, !dbg !805\l  br label %14, !dbg !805\l}"];
	Node0x2568760 -> Node0x25688a0;
	Node0x25687b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%11:\l11:                                               \l  store i32 7, i32* %2, align 4, !dbg !806\l  br label %14, !dbg !806\l}"];
	Node0x25687b0 -> Node0x25688a0;
	Node0x2568800 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%12:\l12:                                               \l  store i32 8, i32* %2, align 4, !dbg !807\l  br label %14, !dbg !807\l}"];
	Node0x2568800 -> Node0x25688a0;
	Node0x2568850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%13:\l13:                                               \l  store i32 0, i32* %2, align 4, !dbg !808\l  br label %14, !dbg !808\l}"];
	Node0x2568850 -> Node0x25688a0;
	Node0x25688a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%14:\l14:                                               \l  %15 = load i32, i32* %2, align 4, !dbg !809\l  ret i32 %15, !dbg !809\l}"];
}
