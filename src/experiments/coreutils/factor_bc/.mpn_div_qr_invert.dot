digraph "CFG for 'mpn_div_qr_invert' function" {
	label="CFG for 'mpn_div_qr_invert' function";

	Node0x1abef60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%3:\l  %4 = alloca %struct.gmp_div_inverse*, align 8\l  %5 = alloca i64*, align 8\l  %6 = alloca i64, align 8\l  %7 = alloca i32, align 4\l  %8 = alloca i64, align 8\l  %9 = alloca i64, align 8\l  %10 = alloca i64, align 8\l  %11 = alloca i32, align 4\l  %12 = alloca i32, align 4\l  store %struct.gmp_div_inverse* %0, %struct.gmp_div_inverse** %4, align 8,\l... !tbaa !805\l  call void @llvm.dbg.declare(metadata %struct.gmp_div_inverse** %4, metadata\l... !792, metadata !DIExpression()), !dbg !809\l  store i64* %1, i64** %5, align 8, !tbaa !805\l  call void @llvm.dbg.declare(metadata i64** %5, metadata !793, metadata\l... !DIExpression()), !dbg !810\l  store i64 %2, i64* %6, align 8, !tbaa !811\l  call void @llvm.dbg.declare(metadata i64* %6, metadata !794, metadata\l... !DIExpression()), !dbg !813\l  %13 = load i64, i64* %6, align 8, !dbg !814, !tbaa !811\l  %14 = icmp sgt i64 %13, 0, !dbg !814\l  br i1 %14, label %15, label %16, !dbg !817\l|{<s0>T|<s1>F}}"];
	Node0x1abef60:s0 -> Node0x1abf0a0;
	Node0x1abef60:s1 -> Node0x1abf0f0;
	Node0x1abf0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%15:\l15:                                               \l  br label %17, !dbg !817\l}"];
	Node0x1abf0a0 -> Node0x1abf140;
	Node0x1abf0f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%16:\l16:                                               \l  call void @__assert_fail(i8* noundef getelementptr inbounds ([7 x i8], [7 x\l... i8]* @.str.50.121, i64 0, i64 0), i8* noundef getelementptr inbounds ([18 x\l... i8], [18 x i8]* @.str.1.74, i64 0, i64 0), i32 noundef 941, i8* noundef\l... getelementptr inbounds ([71 x i8], [71 x i8]*\l... @__PRETTY_FUNCTION__.mpn_div_qr_invert, i64 0, i64 0)) #23, !dbg !814\l  unreachable, !dbg !814\l}"];
	Node0x1abf140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%17:\l17:                                               \l  %18 = load i64, i64* %6, align 8, !dbg !818, !tbaa !811\l  %19 = icmp eq i64 %18, 1, !dbg !819\l  br i1 %19, label %20, label %25, !dbg !820\l|{<s0>T|<s1>F}}"];
	Node0x1abf140:s0 -> Node0x1abf190;
	Node0x1abf140:s1 -> Node0x1abf1e0;
	Node0x1abf190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%20:\l20:                                               \l  %21 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %4, align 8,\l... !dbg !821, !tbaa !805\l  %22 = load i64*, i64** %5, align 8, !dbg !822, !tbaa !805\l  %23 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !822\l  %24 = load i64, i64* %23, align 8, !dbg !822, !tbaa !811\l  call void @mpn_div_qr_1_invert(%struct.gmp_div_inverse* noundef %21, i64\l... noundef %24), !dbg !823\l  br label %141, !dbg !823\l}"];
	Node0x1abf190 -> Node0x1abf8c0;
	Node0x1abf1e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%25:\l25:                                               \l  %26 = load i64, i64* %6, align 8, !dbg !824, !tbaa !811\l  %27 = icmp eq i64 %26, 2, !dbg !825\l  br i1 %27, label %28, label %36, !dbg !826\l|{<s0>T|<s1>F}}"];
	Node0x1abf1e0:s0 -> Node0x1abf230;
	Node0x1abf1e0:s1 -> Node0x1abf280;
	Node0x1abf230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%28:\l28:                                               \l  %29 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %4, align 8,\l... !dbg !827, !tbaa !805\l  %30 = load i64*, i64** %5, align 8, !dbg !828, !tbaa !805\l  %31 = getelementptr inbounds i64, i64* %30, i64 1, !dbg !828\l  %32 = load i64, i64* %31, align 8, !dbg !828, !tbaa !811\l  %33 = load i64*, i64** %5, align 8, !dbg !829, !tbaa !805\l  %34 = getelementptr inbounds i64, i64* %33, i64 0, !dbg !829\l  %35 = load i64, i64* %34, align 8, !dbg !829, !tbaa !811\l  call void @mpn_div_qr_2_invert(%struct.gmp_div_inverse* noundef %29, i64\l... noundef %32, i64 noundef %35), !dbg !830\l  br label %140, !dbg !830\l}"];
	Node0x1abf230 -> Node0x1abf870;
	Node0x1abf280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%36:\l36:                                               \l  %37 = bitcast i32* %7 to i8*, !dbg !831\l  call void @llvm.lifetime.start.p0i8(i64 4, i8* %37) #24, !dbg !831\l  call void @llvm.dbg.declare(metadata i32* %7, metadata !795, metadata\l... !DIExpression()), !dbg !832\l  %38 = bitcast i64* %8 to i8*, !dbg !833\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* %38) #24, !dbg !833\l  call void @llvm.dbg.declare(metadata i64* %8, metadata !799, metadata\l... !DIExpression()), !dbg !834\l  %39 = bitcast i64* %9 to i8*, !dbg !833\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #24, !dbg !833\l  call void @llvm.dbg.declare(metadata i64* %9, metadata !800, metadata\l... !DIExpression()), !dbg !835\l  %40 = load i64*, i64** %5, align 8, !dbg !836, !tbaa !805\l  %41 = load i64, i64* %6, align 8, !dbg !837, !tbaa !811\l  %42 = sub nsw i64 %41, 1, !dbg !838\l  %43 = getelementptr inbounds i64, i64* %40, i64 %42, !dbg !836\l  %44 = load i64, i64* %43, align 8, !dbg !836, !tbaa !811\l  store i64 %44, i64* %8, align 8, !dbg !839, !tbaa !811\l  %45 = load i64*, i64** %5, align 8, !dbg !840, !tbaa !805\l  %46 = load i64, i64* %6, align 8, !dbg !841, !tbaa !811\l  %47 = sub nsw i64 %46, 2, !dbg !842\l  %48 = getelementptr inbounds i64, i64* %45, i64 %47, !dbg !840\l  %49 = load i64, i64* %48, align 8, !dbg !840, !tbaa !811\l  store i64 %49, i64* %9, align 8, !dbg !843, !tbaa !811\l  %50 = load i64, i64* %8, align 8, !dbg !844, !tbaa !811\l  %51 = icmp ugt i64 %50, 0, !dbg !844\l  br i1 %51, label %52, label %53, !dbg !847\l|{<s0>T|<s1>F}}"];
	Node0x1abf280:s0 -> Node0x1abf2d0;
	Node0x1abf280:s1 -> Node0x1abf320;
	Node0x1abf2d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%52:\l52:                                               \l  br label %54, !dbg !847\l}"];
	Node0x1abf2d0 -> Node0x1abf370;
	Node0x1abf320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#5f7fe870",label="{%53:\l53:                                               \l  call void @__assert_fail(i8* noundef getelementptr inbounds ([7 x i8], [7 x\l... i8]* @.str.55.126, i64 0, i64 0), i8* noundef getelementptr inbounds ([18 x\l... i8], [18 x i8]* @.str.1.74, i64 0, i64 0), i32 noundef 954, i8* noundef\l... getelementptr inbounds ([71 x i8], [71 x i8]*\l... @__PRETTY_FUNCTION__.mpn_div_qr_invert, i64 0, i64 0)) #23, !dbg !844\l  unreachable, !dbg !844\l}"];
	Node0x1abf370 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%54:\l54:                                               \l  br label %55, !dbg !848\l}"];
	Node0x1abf370 -> Node0x1abf3c0;
	Node0x1abf3c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%55:\l55:                                               \l  %56 = bitcast i64* %10 to i8*, !dbg !849\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* %56) #24, !dbg !849\l  call void @llvm.dbg.declare(metadata i64* %10, metadata !801, metadata\l... !DIExpression()), !dbg !849\l  %57 = load i64, i64* %8, align 8, !dbg !849, !tbaa !811\l  store i64 %57, i64* %10, align 8, !dbg !849, !tbaa !811\l  %58 = bitcast i32* %11 to i8*, !dbg !849\l  call void @llvm.lifetime.start.p0i8(i64 4, i8* %58) #24, !dbg !849\l  call void @llvm.dbg.declare(metadata i32* %11, metadata !803, metadata\l... !DIExpression()), !dbg !849\l  store i32 0, i32* %11, align 4, !dbg !849, !tbaa !850\l  %59 = bitcast i32* %12 to i8*, !dbg !849\l  call void @llvm.lifetime.start.p0i8(i64 4, i8* %59) #24, !dbg !849\l  call void @llvm.dbg.declare(metadata i32* %12, metadata !804, metadata\l... !DIExpression()), !dbg !849\l  store i32 8, i32* %12, align 4, !dbg !849, !tbaa !850\l  %60 = load i32, i32* %12, align 4, !dbg !852, !tbaa !850\l  %61 = sext i32 %60 to i64, !dbg !852\l  %62 = icmp ugt i64 64, %61, !dbg !852\l  br i1 %62, label %63, label %77, !dbg !849\l|{<s0>T|<s1>F}}"];
	Node0x1abf3c0:s0 -> Node0x1abf410;
	Node0x1abf3c0:s1 -> Node0x1abf5a0;
	Node0x1abf410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%63:\l63:                                               \l  br label %64, !dbg !852\l}"];
	Node0x1abf410 -> Node0x1abf460;
	Node0x1abf460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%64:\l64:                                               \l  %65 = load i64, i64* %10, align 8, !dbg !854, !tbaa !811\l  %66 = and i64 %65, -72057594037927936, !dbg !854\l  %67 = icmp eq i64 %66, 0, !dbg !854\l  br i1 %67, label %68, label %76, !dbg !857\l|{<s0>T|<s1>F}}"];
	Node0x1abf460:s0 -> Node0x1abf4b0;
	Node0x1abf460:s1 -> Node0x1abf550;
	Node0x1abf4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%68:\l68:                                               \l  %69 = load i32, i32* %12, align 4, !dbg !858, !tbaa !850\l  %70 = load i64, i64* %10, align 8, !dbg !858, !tbaa !811\l  %71 = zext i32 %69 to i64, !dbg !858\l  %72 = shl i64 %70, %71, !dbg !858\l  store i64 %72, i64* %10, align 8, !dbg !858, !tbaa !811\l  br label %73, !dbg !858\l}"];
	Node0x1abf4b0 -> Node0x1abf500;
	Node0x1abf500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%73:\l73:                                               \l  %74 = load i32, i32* %11, align 4, !dbg !854, !tbaa !850\l  %75 = add i32 %74, 8, !dbg !854\l  store i32 %75, i32* %11, align 4, !dbg !854, !tbaa !850\l  br label %64, !dbg !854, !llvm.loop !860\l}"];
	Node0x1abf500 -> Node0x1abf460;
	Node0x1abf550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%76:\l76:                                               \l  br label %77, !dbg !857\l}"];
	Node0x1abf550 -> Node0x1abf5a0;
	Node0x1abf5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%77:\l77:                                               \l  br label %78, !dbg !849\l}"];
	Node0x1abf5a0 -> Node0x1abf5f0;
	Node0x1abf5f0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%78:\l78:                                               \l  %79 = load i64, i64* %10, align 8, !dbg !863, !tbaa !811\l  %80 = and i64 %79, -9223372036854775808, !dbg !863\l  %81 = icmp eq i64 %80, 0, !dbg !863\l  br i1 %81, label %82, label %88, !dbg !866\l|{<s0>T|<s1>F}}"];
	Node0x1abf5f0:s0 -> Node0x1abf640;
	Node0x1abf5f0:s1 -> Node0x1abf6e0;
	Node0x1abf640 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%82:\l82:                                               \l  %83 = load i64, i64* %10, align 8, !dbg !863, !tbaa !811\l  %84 = shl i64 %83, 1, !dbg !863\l  store i64 %84, i64* %10, align 8, !dbg !863, !tbaa !811\l  br label %85, !dbg !863\l}"];
	Node0x1abf640 -> Node0x1abf690;
	Node0x1abf690 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%85:\l85:                                               \l  %86 = load i32, i32* %11, align 4, !dbg !863, !tbaa !850\l  %87 = add i32 %86, 1, !dbg !863\l  store i32 %87, i32* %11, align 4, !dbg !863, !tbaa !850\l  br label %78, !dbg !863, !llvm.loop !867\l}"];
	Node0x1abf690 -> Node0x1abf5f0;
	Node0x1abf6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%88:\l88:                                               \l  %89 = load i32, i32* %11, align 4, !dbg !849, !tbaa !850\l  store i32 %89, i32* %7, align 4, !dbg !849, !tbaa !850\l  %90 = bitcast i32* %12 to i8*, !dbg !848\l  call void @llvm.lifetime.end.p0i8(i64 4, i8* %90) #24, !dbg !848\l  %91 = bitcast i32* %11 to i8*, !dbg !848\l  call void @llvm.lifetime.end.p0i8(i64 4, i8* %91) #24, !dbg !848\l  %92 = bitcast i64* %10 to i8*, !dbg !848\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* %92) #24, !dbg !848\l  br label %93, !dbg !849\l}"];
	Node0x1abf6e0 -> Node0x1abf730;
	Node0x1abf730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%93:\l93:                                               \l  br label %94, !dbg !849\l}"];
	Node0x1abf730 -> Node0x1abf780;
	Node0x1abf780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%94:\l94:                                               \l  %95 = load i32, i32* %7, align 4, !dbg !868, !tbaa !850\l  %96 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %4, align 8,\l... !dbg !869, !tbaa !805\l  %97 = getelementptr inbounds %struct.gmp_div_inverse,\l... %struct.gmp_div_inverse* %96, i32 0, i32 0, !dbg !870\l  store i32 %95, i32* %97, align 8, !dbg !871, !tbaa !872\l  %98 = load i32, i32* %7, align 4, !dbg !874, !tbaa !850\l  %99 = icmp ugt i32 %98, 0, !dbg !876\l  br i1 %99, label %100, label %125, !dbg !877\l|{<s0>T|<s1>F}}"];
	Node0x1abf780:s0 -> Node0x1abf7d0;
	Node0x1abf780:s1 -> Node0x1abf820;
	Node0x1abf7d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f08b6e70",label="{%100:\l100:                                              \l  %101 = load i64, i64* %8, align 8, !dbg !878, !tbaa !811\l  %102 = load i32, i32* %7, align 4, !dbg !880, !tbaa !850\l  %103 = zext i32 %102 to i64, !dbg !881\l  %104 = shl i64 %101, %103, !dbg !881\l  %105 = load i64, i64* %9, align 8, !dbg !882, !tbaa !811\l  %106 = load i32, i32* %7, align 4, !dbg !883, !tbaa !850\l  %107 = zext i32 %106 to i64, !dbg !883\l  %108 = sub i64 64, %107, !dbg !884\l  %109 = lshr i64 %105, %108, !dbg !885\l  %110 = or i64 %104, %109, !dbg !886\l  store i64 %110, i64* %8, align 8, !dbg !887, !tbaa !811\l  %111 = load i64, i64* %9, align 8, !dbg !888, !tbaa !811\l  %112 = load i32, i32* %7, align 4, !dbg !889, !tbaa !850\l  %113 = zext i32 %112 to i64, !dbg !890\l  %114 = shl i64 %111, %113, !dbg !890\l  %115 = load i64*, i64** %5, align 8, !dbg !891, !tbaa !805\l  %116 = load i64, i64* %6, align 8, !dbg !892, !tbaa !811\l  %117 = sub nsw i64 %116, 3, !dbg !893\l  %118 = getelementptr inbounds i64, i64* %115, i64 %117, !dbg !891\l  %119 = load i64, i64* %118, align 8, !dbg !891, !tbaa !811\l  %120 = load i32, i32* %7, align 4, !dbg !894, !tbaa !850\l  %121 = zext i32 %120 to i64, !dbg !894\l  %122 = sub i64 64, %121, !dbg !895\l  %123 = lshr i64 %119, %122, !dbg !896\l  %124 = or i64 %114, %123, !dbg !897\l  store i64 %124, i64* %9, align 8, !dbg !898, !tbaa !811\l  br label %125, !dbg !899\l}"];
	Node0x1abf7d0 -> Node0x1abf820;
	Node0x1abf820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ec7f6370",label="{%125:\l125:                                              \l  %126 = load i64, i64* %8, align 8, !dbg !900, !tbaa !811\l  %127 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %4, align 8,\l... !dbg !901, !tbaa !805\l  %128 = getelementptr inbounds %struct.gmp_div_inverse,\l... %struct.gmp_div_inverse* %127, i32 0, i32 1, !dbg !902\l  store i64 %126, i64* %128, align 8, !dbg !903, !tbaa !904\l  %129 = load i64, i64* %9, align 8, !dbg !905, !tbaa !811\l  %130 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %4, align 8,\l... !dbg !906, !tbaa !805\l  %131 = getelementptr inbounds %struct.gmp_div_inverse,\l... %struct.gmp_div_inverse* %130, i32 0, i32 2, !dbg !907\l  store i64 %129, i64* %131, align 8, !dbg !908, !tbaa !909\l  %132 = load i64, i64* %8, align 8, !dbg !910, !tbaa !811\l  %133 = load i64, i64* %9, align 8, !dbg !911, !tbaa !811\l  %134 = call i64 @mpn_invert_3by2(i64 noundef %132, i64 noundef %133), !dbg\l... !912\l  %135 = load %struct.gmp_div_inverse*, %struct.gmp_div_inverse** %4, align 8,\l... !dbg !913, !tbaa !805\l  %136 = getelementptr inbounds %struct.gmp_div_inverse,\l... %struct.gmp_div_inverse* %135, i32 0, i32 3, !dbg !914\l  store i64 %134, i64* %136, align 8, !dbg !915, !tbaa !916\l  %137 = bitcast i64* %9 to i8*, !dbg !917\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* %137) #24, !dbg !917\l  %138 = bitcast i64* %8 to i8*, !dbg !917\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* %138) #24, !dbg !917\l  %139 = bitcast i32* %7 to i8*, !dbg !917\l  call void @llvm.lifetime.end.p0i8(i64 4, i8* %139) #24, !dbg !917\l  br label %140\l}"];
	Node0x1abf820 -> Node0x1abf870;
	Node0x1abf870 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%140:\l140:                                              \l  br label %141\l}"];
	Node0x1abf870 -> Node0x1abf8c0;
	Node0x1abf8c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%141:\l141:                                              \l  ret void, !dbg !918\l}"];
}
